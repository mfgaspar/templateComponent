{
 "layout": {
  "title": "CDF - Sample structure",
  "rows": [
   {
    "id": "81ae865d-4da3-1301-85ca-be066f62dc63",
    "type": "LayoutResourceCode",
    "typeDesc": "Resource",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "mustacheJS",
      "type": "Id"
     },
     {
      "name": "resourceType",
      "value": "Javascript",
      "type": "Label"
     },
     {
      "name": "resourceCode",
      "value": "/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false*/\n\n(function (global, factory) {\n  if (typeof exports === \"object\" && exports) {\n    factory(exports); // CommonJS\n  } else if (typeof define === \"function\" && define.amd) {\n    define(['exports'], factory); // AMD\n  } else {\n    factory(global.Mustache = {}); // <script>\n  }\n}(this, function (mustache) {\n\n  var Object_toString = Object.prototype.toString;\n  var isArray = Array.isArray || function (object) {\n    return Object_toString.call(object) === '[object Array]';\n  };\n\n  function isFunction(object) {\n    return typeof object === 'function';\n  }\n\n  function escapeRegExp(string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var RegExp_test = RegExp.prototype.test;\n  function testRegExp(re, string) {\n    return RegExp_test.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace(string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    \"/\": '&#x2F;'\n  };\n\n  function escapeHtml(string) {\n    return String(string).replace(/[&<>\"'\\/]/g, function (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate(template, tags) {\n    if (!template)\n      return [];\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace() {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags(tags) {\n      if (typeof tags === 'string')\n        tags = tags.split(spaceRe, 2);\n\n      if (!isArray(tags) || tags.length !== 2)\n        throw new Error('Invalid tags: ' + tags);\n\n      openingTagRe = new RegExp(escapeRegExp(tags[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tags[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tags[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n')\n            stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens(tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens(tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n      case '#':\n      case '^':\n        collector.push(token);\n        sections.push(token);\n        collector = token[4] = [];\n        break;\n      case '/':\n        section = sections.pop();\n        section[5] = token[2];\n        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n        break;\n      default:\n        collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner(string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function () {\n    return this.tail === \"\";\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n    case -1:\n      match = this.tail;\n      this.tail = \"\";\n      break;\n    case 0:\n      match = \"\";\n      break;\n    default:\n      match = this.tail.substring(0, index);\n      this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context(view, parentContext) {\n    this.view = view == null ? {} : view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function (name) {\n    var cache = this.cache;\n\n    var value;\n    if (name in cache) {\n      value = cache[name];\n    } else {\n      var context = this, names, index;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n          names = name.split('.');\n          index = 0;\n\n          while (value != null && index < names.length)\n            value = value[names[index++]];\n        } else if (typeof context.view == 'object') {\n          value = context.view[name];\n        }\n\n        if (value != null)\n          break;\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer() {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function (template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null)\n      tokens = cache[template] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function (template, view, partials) {\n    var tokens = this.parse(template);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function (tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this._renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this._renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this._renderPartial(token, context, partials, originalTemplate);\n      else if (symbol === '&') value = this._unescapedValue(token, context);\n      else if (symbol === 'name') value = this._escapedValue(token, context);\n      else if (symbol === 'text') value = this._rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype._renderSection = function (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender(template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype._renderInverted = function(token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype._renderPartial = function(token, context, partials) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null)\n      return this.renderTokens(this.parse(value), context, partials, value);\n  };\n\n  Writer.prototype._unescapedValue = function(token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype._escapedValue = function(token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype._rawValue = function(token) {\n    return token[1];\n  };\n\n  mustache.name = \"mustache.js\";\n  mustache.version = \"1.0.0\";\n  mustache.tags = [ \"{{\", \"}}\" ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function (template, view, partials) {\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.\n  mustache.to_html = function (template, view, partials, send) {\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n})); ",
      "type": "Resource"
     }
    ]
   },
   {
    "id": "7e06edba-2497-4449-576f-fe7b12e78f45",
    "type": "LayoutResourceCode",
    "typeDesc": "Resource",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "mustacheWaxJS",
      "type": "Id"
     },
     {
      "name": "resourceType",
      "value": "Javascript",
      "type": "Label"
     },
     {
      "name": "resourceCode",
      "value": "(function(root, wax) {\n    // Set up Backbone appropriately for the environment. Start with AMD.\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(['mustache'], function(mustache) {\n\t\t\twax(mustache);\n\t\t});\n\n\t// Next for Node.js or CommonJS. jQuery may not be needed as a module.\n\t} else if (typeof exports !== 'undefined') {\n\t\tvar mustache = require('mustache');\n\t\twax(mustache);\n\n\t// Finally, as a browser global.\n\t} else {\n\t\twax(root.Mustache);\n\t}\n}(this, function Wax(Mustache) {\n\tMustache.Formatters = {};\n\n\t/*\n\t *\tThis will parse a parameter from a filter:\n\t *  \n\t *      {{ vaue | filter : param1 : param2 : param3 }}\n\t */\n\tMustache.Context.prototype.parseParam = function parseParam(param) {\n\t\tvar isString, isInteger, isFloat;\n\t\tisString  = /^[\\'\\\"](.*)[\\'\\\"]$/g;\n\t\tisInteger = /^[+-]?\\d+$/g;\n\t\tisFloat   = /^[+-]?\\d*\\.\\d+$/g;\n\t\tif (isString.test(param)) {\n\t\t\treturn param.replace(isString, '$1');\n\t\t}\n\t\tif (isInteger.test(param)) {\n\t\t\treturn parseInt(param, 10);\n\t\t}\n\t\tif (isFloat.test(param)) {\n\t\t\treturn parseFloat(param);\n\t\t}\n\t\treturn this._lookup(param);\n\t};\n\n\t/*\n\t *\tThis function will resolve one filter# in the mustache expression:\n\t *  \n\t *      {{ value | filter1 | filter2 | ... | filterN }}\n\t */\n\tMustache.Context.prototype.applyFilter = function applyFilter(expr, fltr) {\n\t\tvar filterExp, paramsExp, match, filter, params = [expr];\n\t\tfilterExp = /^\\s*([^\\:]+)/g;\n\t\tparamsExp = /\\:\\s*([\\'][^\\']*[\\']|[\\\"][^\\\"]*[\\\"]|[^\\:]+)\\s*/g;\n\t\tmatch = filterExp.exec( fltr);\n\t\tfilter = match[1].trim();\n\t\twhile ((match = paramsExp.exec(fltr))) {\n\t\t\tparams.push(this.parseParam(match[1].trim()));\n\t\t}\n\t\t//console.log( filter);\n\t\t//console.log( params);\n\t\tif (Mustache.Formatters.hasOwnProperty(filter)) {\n\t\t\tfltr = Mustache.Formatters[filter];\n\t\t\treturn fltr.apply(fltr, params);\n\t\t}\n\t\treturn expr;\n\t};\n\n\t/*\n\t * Keep a copy of the original lookup function of Mustache\n\t */\n\tMustache.Context.prototype._lookup = Mustache.Context.prototype.lookup;\n\n\t/*\n\t * Overwrite the Context::lookup method to add filter capabilities\n\t */\n\tMustache.Context.prototype.lookup =  function parseExpression(name) {\n\t\tvar i, l, expression, formatters;\n\t\tformatters    = name.split(\"|\");\n\t\texpression = formatters.shift().trim();\n\t\t//console.log(expression);\n\t\texpression = this._lookup(expression);\n\t\tfor (i = 0, l = formatters.length; i < l; ++i) {\n\t\t\texpression = this.applyFilter(expression, formatters[i]);\n\t\t}\n\t\treturn expression;\n\t};\n})); ",
      "type": "Resource"
     }
    ]
   },
   {
    "id": "cdb1f36d-9f6c-4b60-cf1c-bac4113242de",
    "type": "LayoutResourceFile",
    "typeDesc": "Resource",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "templatesCSS",
      "type": "Id"
     },
     {
      "name": "resourceFile",
      "value": "${solution:resources/css/templates.css}",
      "type": "ResourceFile"
     },
     {
      "name": "resourceType",
      "value": "Css",
      "type": "Label"
     }
    ]
   },
   {
    "id": "3c33e9e5-2ef5-6b9f-c53d-8bd17011f3c5",
    "type": "LayoutResourceFile",
    "typeDesc": "Resource",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "iconsCSS",
      "type": "Id"
     },
     {
      "name": "resourceFile",
      "value": "${solution:resources/css/style.css}",
      "type": "ResourceFile"
     },
     {
      "name": "resourceType",
      "value": "Css",
      "type": "Label"
     }
    ]
   },
   {
    "id": "89607f1d-b241-80e6-77de-58daeaa64fc5",
    "type": "LayoutResourceFile",
    "typeDesc": "Resource",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "numeralJS",
      "type": "Id"
     },
     {
      "name": "resourceFile",
      "value": "${solution:resources/libs/numeral.min.js}",
      "type": "ResourceFile"
     },
     {
      "name": "resourceType",
      "value": "Javascript",
      "type": "Label"
     }
    ]
   },
   {
    "id": "9eb60ca1-9ed8-5449-5911-027e9ea54995",
    "type": "LayoutResourceFile",
    "typeDesc": "Resource",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "momentJS",
      "type": "Id"
     },
     {
      "name": "resourceFile",
      "value": "${solution:resources/libs/moment.min.js}",
      "type": "ResourceFile"
     },
     {
      "name": "resourceType",
      "value": "Javascript",
      "type": "Label"
     }
    ]
   },
   {
    "id": "800c7d46-1b4e-31fb-235d-adb671ee380e",
    "type": "LayoutResourceFile",
    "typeDesc": "Resource",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "qtipJS",
      "type": "Id"
     },
     {
      "name": "resourceFile",
      "value": "${solution:resources/libs/jquery.qtip.min.js}",
      "type": "ResourceFile"
     },
     {
      "name": "resourceType",
      "value": "Javascript",
      "type": "Label"
     }
    ]
   },
   {
    "id": "842ba44d-cb72-c42f-5e2a-2805aa0ef106",
    "type": "LayoutResourceFile",
    "typeDesc": "Resource",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "notyJS",
      "type": "Id"
     },
     {
      "name": "resourceFile",
      "value": "${solution:resources/libs/jquery.noty.min.js}",
      "type": "ResourceFile"
     },
     {
      "name": "resourceType",
      "value": "Javascript",
      "type": "Label"
     }
    ]
   },
   {
    "id": "78a5042d-3a87-1128-5f4a-3284e6efa297",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "section",
      "type": "String"
     }
    ]
   },
   {
    "id": "412a8ecc-3595-eb4f-c4af-9dee2660e8b3",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "78a5042d-3a87-1128-5f4a-3284e6efa297",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "12",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "sectionTitle",
      "type": "String"
     }
    ]
   },
   {
    "id": "ca448880-dea5-ee73-24aa-7ea6d96a8a63",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "412a8ecc-3595-eb4f-c4af-9dee2660e8b3",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<div> Mustache Template </div> ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "f61328d2-39ef-49ed-a1c6-bb6ab00d6725",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "412a8ecc-3595-eb4f-c4af-9dee2660e8b3",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<div> Example of using a simple mustache template </div> ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "description",
      "type": "String"
     }
    ]
   },
   {
    "id": "6f011df8-cf1a-216a-9086-c6c56e68175f",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "78a5042d-3a87-1128-5f4a-3284e6efa297",
    "properties": [
     {
      "name": "name",
      "value": "mustacheTemplate",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "12",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "aa97acd3-2398-0adc-dc53-60a627f12a25",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "section",
      "type": "String"
     }
    ]
   },
   {
    "id": "34548e37-3407-6c22-d0ec-6b27ee3ce342",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "aa97acd3-2398-0adc-dc53-60a627f12a25",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "12",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "sectionTitle",
      "type": "String"
     }
    ]
   },
   {
    "id": "effabd5f-9ad7-867b-9573-ce69903b5423",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "34548e37-3407-6c22-d0ec-6b27ee3ce342",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<div> Underscore Template </div> ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "28f6ef77-7a66-bdb5-2372-9b2d05165e25",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "34548e37-3407-6c22-d0ec-6b27ee3ce342",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<div> Example of using a simple underscore template </div> ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "description",
      "type": "String"
     }
    ]
   },
   {
    "id": "44e3b722-0f8f-fbd4-315f-761ae8c1e96b",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "aa97acd3-2398-0adc-dc53-60a627f12a25",
    "properties": [
     {
      "name": "name",
      "value": "underscoreTemplate",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "12",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "8b906856-7f59-2af2-c305-35f6a95bb5f2",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "section",
      "type": "String"
     }
    ]
   },
   {
    "id": "88931338-b7a3-7f53-9a2f-3d390ee92ef6",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "8b906856-7f59-2af2-c305-35f6a95bb5f2",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "12",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "sectionTitle",
      "type": "String"
     }
    ]
   },
   {
    "id": "75ceff6f-3c1a-3572-3385-8fda79d89263",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "88931338-b7a3-7f53-9a2f-3d390ee92ef6",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<div> Clickable Underscore Template</div> \n ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "3fb5ee47-de08-d8fd-a7cb-d6ec0f91916f",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "88931338-b7a3-7f53-9a2f-3d390ee92ef6",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<div> Handling events for templates. Click on each element to do a fireChange. </div> ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "description",
      "type": "String"
     }
    ]
   },
   {
    "id": "1a0f74b8-7e3b-7f76-2b6e-e055ae780547",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "8b906856-7f59-2af2-c305-35f6a95bb5f2",
    "properties": [
     {
      "name": "name",
      "value": "underscoreClick",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "12",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "mustacheTemplate",
      "type": "String"
     }
    ]
   },
   {
    "id": "9c0e22d4-1a07-2297-2e0b-d43e334e99e8",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "8b906856-7f59-2af2-c305-35f6a95bb5f2",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "2",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "4e9f7097-c083-a943-41c0-ef11716452bd",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "9c0e22d4-1a07-2297-2e0b-d43e334e99e8",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "You have clicked: ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "1450cd72-7892-f341-6d19-f9aae10f1321",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "8b906856-7f59-2af2-c305-35f6a95bb5f2",
    "properties": [
     {
      "name": "name",
      "value": "clicked",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "10",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "aab22453-7ca0-56be-5bed-65b3be340e52",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "section",
      "type": "String"
     }
    ]
   },
   {
    "id": "c79023d0-7a47-fe5c-952b-2074d2e27209",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "aab22453-7ca0-56be-5bed-65b3be340e52",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "12",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "sectionTitle",
      "type": "String"
     }
    ]
   },
   {
    "id": "afe27e7b-2b3d-6502-fec1-58b76eb8fb78",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "c79023d0-7a47-fe5c-952b-2074d2e27209",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<div> Underscore template with fomatted model values</div> \n ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "df979a94-211b-c621-3149-59e0ebcf05ab",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "c79023d0-7a47-fe5c-952b-2074d2e27209",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<div> We can apply functions to format the fields of the model on the template. </div> ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "description",
      "type": "String"
     }
    ]
   },
   {
    "id": "fc05ed54-376d-e021-636d-c47f43eced77",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "aab22453-7ca0-56be-5bed-65b3be340e52",
    "properties": [
     {
      "name": "name",
      "value": "underscoreFormatted",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "12",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "mustacheUnderscoreFormatted",
      "type": "String"
     }
    ]
   },
   {
    "id": "e66767fb-8f3d-56d1-9b36-8d16ce276592",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "section",
      "type": "String"
     }
    ]
   },
   {
    "id": "c9731d5b-b686-19a7-e1f9-360cbf53f688",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "e66767fb-8f3d-56d1-9b36-8d16ce276592",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "12",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "sectionTitle",
      "type": "String"
     }
    ]
   },
   {
    "id": "5312e18f-1c4c-2eb6-ddfd-9d8f0a84c811",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "c9731d5b-b686-19a7-e1f9-360cbf53f688",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<div> Empty Template </div> ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "97832066-f983-1133-9a8f-882dfbdb3f90",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "c9731d5b-b686-19a7-e1f9-360cbf53f688",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<div> It's also possible the template and the text of error handling. </div> ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "description",
      "type": "String"
     }
    ]
   },
   {
    "id": "a032b886-19a6-9c18-a95e-a555771e9060",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "e66767fb-8f3d-56d1-9b36-8d16ce276592",
    "properties": [
     {
      "name": "name",
      "value": "emptyTemplate",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "12",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "mustacheTemplate",
      "type": "String"
     }
    ]
   },
   {
    "id": "66aaa4cb-6d78-06e6-f8f2-25e1112b2ce6",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "section",
      "type": "String"
     }
    ]
   },
   {
    "id": "338dc0f0-954e-b098-9a63-991f6fcbb55a",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "66aaa4cb-6d78-06e6-f8f2-25e1112b2ce6",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "12",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "sectionTitle",
      "type": "String"
     }
    ]
   },
   {
    "id": "a76df0ba-79fb-4e14-2627-243d4ab5a1be",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "338dc0f0-954e-b098-9a63-991f6fcbb55a",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<div> Manipulating Data for the Template </div> ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "e4e106d5-6c7e-1405-15ff-331470a592f3",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "338dc0f0-954e-b098-9a63-991f6fcbb55a",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<div> The compoent will model the resultset, but you can also do it and create the best and more complex models to be used in your templates. </div> ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "description",
      "type": "String"
     }
    ]
   },
   {
    "id": "8831178d-d20e-1c7e-ebee-7c1ab01442bc",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "66aaa4cb-6d78-06e6-f8f2-25e1112b2ce6",
    "properties": [
     {
      "name": "name",
      "value": "manipulateData",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "12",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "mustacheTemplate",
      "type": "String"
     }
    ]
   },
   {
    "id": "2d63bb1d-60f2-0776-9360-954d5da16a41",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "section",
      "type": "String"
     }
    ]
   },
   {
    "id": "87b08adb-b16e-7777-0ff2-26da520f6722",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "2d63bb1d-60f2-0776-9360-954d5da16a41",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "12",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "sectionTitle",
      "type": "String"
     }
    ]
   },
   {
    "id": "ddd0356c-b96e-cff6-d2b7-cdd8bcc80691",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "87b08adb-b16e-7777-0ff2-26da520f6722",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<div> Template usage with underscore </div> ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "b32ff491-ed99-3106-f5f2-e7788939cc2c",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "87b08adb-b16e-7777-0ff2-26da520f6722",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<div> This is using a template that is defined on the html and not like a string. </div> ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "debbdd3b-6ea0-859d-75e5-6b281b9f75cd",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "87b08adb-b16e-7777-0ff2-26da520f6722",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<script type=\"text/template\" id=\"underscoreHtmlTemplate\">\n    <% var getTrend = function(elem, key) {if (elem < 0) {return \"down icon-arrow-circle-o-down\"} else {return \"up icon-arrow-circle-o-up\"} } %>\n    <div class=\"templateWrapper\">\n    <% _.each(items, function(elem) { %>\n           <div class=\"templateRow clickable\" data-click=\"<%=elem[0]%>\">\n               <div class=\"title\"> <%=elem[0]%> </div>\n               <div class=\"desc\"> <%=elem[1]%> </div>\n               <div class=\"value\">\n                   <div class=\"trend <%=getTrend(elem[2])%>\"> </div>\n                   <div class=\"number\"> <%=numeral(elem[2]).format(\"0.0\")%> </div>\n               </div>\n           </div>\n    <% }); %>\n    </div>\n</script> ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "e8a8205b-091c-9aef-ef33-e489eaac1cc7",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "2d63bb1d-60f2-0776-9360-954d5da16a41",
    "properties": [
     {
      "name": "name",
      "value": "htmlTemplate",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "12",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "8a1967d4-bb16-8404-0530-7ef2b969840a",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "section",
      "type": "String"
     }
    ]
   },
   {
    "id": "ab4e13d7-7f83-a1bf-dd26-96d3bd81dcec",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "8a1967d4-bb16-8404-0530-7ef2b969840a",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "12",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "sectionTitle",
      "type": "String"
     }
    ]
   },
   {
    "id": "a98ad213-a4ce-5e4f-4d49-4550bda3211b",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "ab4e13d7-7f83-a1bf-dd26-96d3bd81dcec",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<div>Underscore templates and addins on template component</div> \n ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "cfc6742f-ff5b-bb10-0720-03376d98a832",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "ab4e13d7-7f83-a1bf-dd26-96d3bd81dcec",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<div> The compoent also allows the use of addins inside the template. It allows to build addins that can be easly reused. Apply formarting and error handling it's also possible on the addins. Bellow clicking on the gray or yellow area you will get diferent notifications. </div> ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "description",
      "type": "String"
     }
    ]
   },
   {
    "id": "0fa231e2-3f69-02d7-13d4-7de05bb4c1f9",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "8a1967d4-bb16-8404-0530-7ef2b969840a",
    "properties": [
     {
      "name": "name",
      "value": "addinsOnTemplateComp",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "12",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "mustacheUnderscoreFormatted",
      "type": "String"
     }
    ]
   },
   {
    "id": "d4e0cdfa-17fc-6ef3-2503-d7d0a58e3263",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "section",
      "type": "String"
     }
    ]
   },
   {
    "id": "e616ef50-f3ac-fdbe-3ead-82251b24a546",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "d4e0cdfa-17fc-6ef3-2503-d7d0a58e3263",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "12",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "sectionTitle",
      "type": "String"
     }
    ]
   },
   {
    "id": "2f8b9d32-4490-011f-082f-5e81e3ae82c3",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "e616ef50-f3ac-fdbe-3ead-82251b24a546",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<div>Underscore templates - Grouping by ... </div> \n ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "9825878c-b003-9894-3804-53b2b1e5256c",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "e616ef50-f3ac-fdbe-3ead-82251b24a546",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<div> The component is grouping by ... and showing the results. </div> ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "description",
      "type": "String"
     }
    ]
   },
   {
    "id": "c06da0cf-e7e2-9b59-5609-989b0c454da2",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "d4e0cdfa-17fc-6ef3-2503-d7d0a58e3263",
    "properties": [
     {
      "name": "name",
      "value": "groupByTemplateComp",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "12",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "mustacheUnderscoreFormatted",
      "type": "String"
     }
    ]
   },
   {
    "id": "04e5f3a4-89d0-5a67-282c-63c7548f8ae5",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "section",
      "type": "String"
     }
    ]
   },
   {
    "id": "63a92ed4-3283-932c-52cd-ca9353f12f49",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "04e5f3a4-89d0-5a67-282c-63c7548f8ae5",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "12",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "sectionTitle",
      "type": "String"
     }
    ]
   },
   {
    "id": "e8356bc6-b2f6-475a-75e8-2d51bf3e2d1b",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "63a92ed4-3283-932c-52cd-ca9353f12f49",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<div> Html template usage with underscore </div> ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "259e994b-6a93-2756-8846-bce63451d4c6",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "63a92ed4-3283-932c-52cd-ca9353f12f49",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<div> On the component are also included addins for the table component. This allows the use of templates on each cell of a table,. It's possible to apply formatting and event handling. The firts 3 columns are using template addins. Click on the links to see some action. </div> ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "description",
      "type": "String"
     }
    ]
   },
   {
    "id": "2f03409c-77f7-27e8-b6b1-f108f3b2a4cb",
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column",
    "parent": "04e5f3a4-89d0-5a67-282c-63c7548f8ae5",
    "properties": [
     {
      "name": "name",
      "value": "addinTemplateTable",
      "type": "Id"
     },
     {
      "name": "bootstrapExtraSmall",
      "value": "12",
      "type": "String"
     },
     {
      "name": "bootstrapSmall",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapMedium",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapLarge",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapCssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   }
  ]
 },
 "components": {
  "rows": [
   {
    "id": "GENERIC",
    "name": "Generic",
    "type": "Label",
    "typeDesc": "<i>Group</i>",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "value": "Generic",
      "type": "Label"
     }
    ]
   },
   {
    "id": "35991c96-5b33-29c7-7699-d73c04688fe7",
    "type": "ComponentsParameter",
    "typeDesc": "Simple parameter",
    "parent": "GENERIC",
    "properties": [
     {
      "name": "name",
      "value": "clickParam",
      "type": "Id"
     },
     {
      "name": "propertyValue",
      "value": "CCC",
      "type": "String"
     },
     {
      "name": "parameterViewRole",
      "value": "unused",
      "type": "parameterViewRoleCustom"
     },
     {
      "name": "bookmarkable",
      "value": "false",
      "type": "Boolean"
     }
    ]
   },
   {
    "id": "OTHERCOMPONENTS",
    "name": "Others",
    "type": "Label",
    "typeDesc": "<i>Group</i>",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "value": "Others",
      "type": "Label"
     }
    ]
   },
   {
    "id": "55260558-733d-33ae-e878-c1c7ed768203",
    "type": "ComponentstextComponent",
    "typeDesc": "Text Component",
    "parent": "OTHERCOMPONENTS",
    "properties": [
     {
      "name": "name",
      "value": "clicked",
      "type": "Id"
     },
     {
      "name": "listeners",
      "value": "['${p:clickParam}']",
      "type": "Listeners"
     },
     {
      "name": "expression",
      "value": "function() {\n    return Dashboards.getParameterValue('${p:clickParam}')\n} ",
      "type": "JavaScript"
     },
     {
      "name": "priority",
      "value": 5,
      "type": "Integer"
     },
     {
      "name": "refreshPeriod",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "htmlObject",
      "value": "${p:clicked}",
      "type": "HtmlObject"
     },
     {
      "name": "executeAtStart",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "preExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "tooltip",
      "value": "",
      "type": "Html"
     }
    ]
   },
   {
    "id": "d010cfba-5729-e2c4-2032-bfdf74ada51f",
    "type": "ComponentstemplateComponent",
    "typeDesc": "Template Component",
    "parent": "OTHERCOMPONENTS",
    "properties": [
     {
      "name": "name",
      "value": "mustacheSimple",
      "type": "Id"
     },
     {
      "name": "title",
      "value": "",
      "type": "String"
     },
     {
      "name": "parameter",
      "value": "",
      "type": "Parameter"
     },
     {
      "name": "listeners",
      "value": "[]",
      "type": "Listeners"
     },
     {
      "name": "parameters",
      "value": "[]",
      "type": "ValuesArray"
     },
     {
      "name": "dataSource",
      "value": "templateQuery",
      "type": "Datasource"
     },
     {
      "name": "priority",
      "value": 5,
      "type": "Integer"
     },
     {
      "name": "htmlObject",
      "value": "${p:mustacheTemplate}",
      "type": "HtmlObject"
     },
     {
      "name": "executeAtStart",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "preExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postFetch",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "preChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "tooltip",
      "value": "",
      "type": "Html"
     },
     {
      "name": "modelHandler",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "template",
      "value": "function() {\n    var template = ''+\n    '<div class=\"templateWrapper\">'+\n    '   {{#items}} '+\n    '       <div class=\"templateRow\">'+\n    '           <div class=\"title\"> {{0}} </div>'+\n    '           <div class=\"desc\"> {{1}} </div>'+\n    '           <div class=\"number\"> {{2}} </div>'+\n    '       </div>'+\n    '   {{/items}} '+\n    '</div>';\n    return template;\n}\n ",
      "type": "JavaScript"
     },
     {
      "name": "templateType",
      "value": "mustache",
      "type": "templateTypeCustom"
     },
     {
      "name": "events",
      "value": "[]",
      "type": "EditorValuesArray"
     },
     {
      "name": "formatters",
      "value": "[]",
      "type": "EditorValuesArray"
     },
     {
      "name": "rootElement",
      "value": "items",
      "type": "String"
     },
     {
      "name": "extendableOptions",
      "value": "function() {\n    var opts = {\n        extendedProperty: \"this is sample extend property\"\n    };\n    return opts;\n}\n    ",
      "type": "JavaScript"
     }
    ]
   },
   {
    "id": "fbdae4d9-f087-82f7-124e-558c0f310497",
    "type": "ComponentstemplateComponent",
    "typeDesc": "Template Component",
    "parent": "OTHERCOMPONENTS",
    "properties": [
     {
      "name": "name",
      "value": "mustacheSimple_new",
      "type": "Id"
     },
     {
      "name": "title",
      "value": "",
      "type": "String"
     },
     {
      "name": "parameter",
      "value": "",
      "type": "Parameter"
     },
     {
      "name": "listeners",
      "value": "[]",
      "type": "Listeners"
     },
     {
      "name": "parameters",
      "value": "[]",
      "type": "ValuesArray"
     },
     {
      "name": "dataSource",
      "value": "templateQuery",
      "type": "Datasource"
     },
     {
      "name": "priority",
      "value": 5,
      "type": "Integer"
     },
     {
      "name": "htmlObject",
      "value": "${p:mustacheTemplate}",
      "type": "HtmlObject"
     },
     {
      "name": "executeAtStart",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "preExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postFetch",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "preChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "tooltip",
      "value": "",
      "type": "Html"
     },
     {
      "name": "modelHandler",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "template",
      "value": "function() {\n    var template = ''+\n    '<div class=\"templateWrapper\">'+\n    '   {{#items}} '+\n    '       <div class=\"templateRow\">'+\n    '           <div class=\"title\"> {{0 | formatter : \"none\"}} </div>'+\n    '           <div class=\"desc\"> {{1}} </div>'+\n    '           <div class=\"number\"> {{2}} </div>'+\n    '       </div>'+\n    '   {{/items}} '+\n    '</div>';\n    return template;\n}\n ",
      "type": "JavaScript"
     },
     {
      "name": "templateType",
      "value": "mustache",
      "type": "templateTypeCustom"
     },
     {
      "name": "events",
      "value": "[]",
      "type": "EditorValuesArray"
     },
     {
      "name": "formatters",
      "value": "[[\"none\",\"function(value) {\\n    return value;\\n}\"]]",
      "type": "EditorValuesArray"
     },
     {
      "name": "rootElement",
      "value": "items",
      "type": "String"
     },
     {
      "name": "extendableOptions",
      "value": "function() {\n    var opts = {\n        extendedProperty: \"this is sample extend property\"\n    };\n    return opts;\n}\n    ",
      "type": "JavaScript"
     }
    ]
   },
   {
    "id": "7646f63b-0fe3-2948-714f-554dd44257d3",
    "type": "ComponentstemplateComponent",
    "typeDesc": "Template Component",
    "parent": "OTHERCOMPONENTS",
    "properties": [
     {
      "name": "name",
      "value": "underscoreSimple",
      "type": "Id"
     },
     {
      "name": "title",
      "value": "",
      "type": "String"
     },
     {
      "name": "parameter",
      "value": "",
      "type": "Parameter"
     },
     {
      "name": "listeners",
      "value": "[]",
      "type": "Listeners"
     },
     {
      "name": "parameters",
      "value": "[]",
      "type": "ValuesArray"
     },
     {
      "name": "dataSource",
      "value": "templateQuery",
      "type": "Datasource"
     },
     {
      "name": "priority",
      "value": 5,
      "type": "Integer"
     },
     {
      "name": "htmlObject",
      "value": "${p:underscoreTemplate}",
      "type": "HtmlObject"
     },
     {
      "name": "executeAtStart",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "preExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postFetch",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "preChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "tooltip",
      "value": "",
      "type": "Html"
     },
     {
      "name": "modelHandler",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "template",
      "value": "function() {\n    var template = ''+\n    '<div class=\"templateWrapper\">'+\n    '<% _.each(items, function(elem) { %> ' +\n    '       <div class=\"templateRow\">'+\n    '           <div class=\"title\"> <%=elem[0]%> </div>'+\n    '           <div class=\"desc\"> <%=elem[1]%> </div>'+\n    '           <div class=\"number\"> <%=elem[2]%> </div>'+\n    '       </div>'+\n    '<% }); %>'\n    '</div>';\n    return template;\n}\n ",
      "type": "JavaScript"
     },
     {
      "name": "templateType",
      "value": "underscore",
      "type": "templateTypeCustom"
     },
     {
      "name": "events",
      "value": "[]",
      "type": "EditorValuesArray"
     },
     {
      "name": "formatters",
      "value": "[]",
      "type": "EditorValuesArray"
     },
     {
      "name": "rootElement",
      "value": "items",
      "type": "String"
     },
     {
      "name": "extendableOptions",
      "value": "function() {\n    var opts = {\n        extendedProperty: \"this is sample extend property\"\n    };\n    return opts;\n}\n    ",
      "type": "JavaScript"
     }
    ]
   },
   {
    "id": "647f1951-2274-8ccf-246c-5525bdebf466",
    "type": "ComponentstemplateComponent",
    "typeDesc": "Template Component",
    "parent": "OTHERCOMPONENTS",
    "properties": [
     {
      "name": "name",
      "value": "underscoreClick",
      "type": "Id"
     },
     {
      "name": "title",
      "value": "",
      "type": "String"
     },
     {
      "name": "parameter",
      "value": "",
      "type": "Parameter"
     },
     {
      "name": "listeners",
      "value": "[]",
      "type": "Listeners"
     },
     {
      "name": "parameters",
      "value": "[]",
      "type": "ValuesArray"
     },
     {
      "name": "dataSource",
      "value": "templateQuery",
      "type": "Datasource"
     },
     {
      "name": "priority",
      "value": 5,
      "type": "Integer"
     },
     {
      "name": "htmlObject",
      "value": "${p:underscoreClick}",
      "type": "HtmlObject"
     },
     {
      "name": "executeAtStart",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "preExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postFetch",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "preChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "tooltip",
      "value": "",
      "type": "Html"
     },
     {
      "name": "modelHandler",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "template",
      "value": "function() {\n    var template = ''+\n    '<% var getTrend = function(elem, key) {if (elem < 0) {return \"down icon-arrow-circle-o-down\"} else {return \"up icon-arrow-circle-o-up\"} } %>' + \n    '<div class=\"templateWrapper\">'+\n    '<% _.each(items, function(elem) { %> ' +\n    '       <div class=\"templateRow clickable\" data-click=\"<%=elem[0]%>\">'+\n    '           <div class=\"title\"> <%=elem[0]%> </div>'+\n    '           <div class=\"desc\"> <%=elem[1]%> </div>'+\n    '           <div class=\"value\">'+\n    '               <div class=\"trend <%=getTrend(elem[2])%>\"> </div>'+\n    '               <div class=\"number\"> <%=numeral(elem[2]).format(\"0.0\")%> </div>'+\n    '           </div>'+\n    '       </div>'+\n    '<% }); %>'\n    '</div>';\n    return template;\n}\n ",
      "type": "JavaScript"
     },
     {
      "name": "templateType",
      "value": "underscore",
      "type": "templateTypeCustom"
     },
     {
      "name": "events",
      "value": "[[\"click .templateRow\",\"function(e){\\n    var selected = $(this).attr('data-click');\\n    Dashboards.fireChange('${p:clickParam}', selected);\\n    Dashboards.log(selected, 'info');\\n}\"]]",
      "type": "EditorValuesArray"
     },
     {
      "name": "formatters",
      "value": "[]",
      "type": "EditorValuesArray"
     },
     {
      "name": "rootElement",
      "value": "items",
      "type": "String"
     },
     {
      "name": "extendableOptions",
      "value": "function() {\n    var opts = {\n        extendedProperty: \"this is sample extend property\"\n    };\n    return opts;\n}\n    ",
      "type": "JavaScript"
     }
    ]
   },
   {
    "id": "98400823-3aed-2213-e660-469f11b3a058",
    "type": "ComponentstemplateComponent",
    "typeDesc": "Template Component",
    "parent": "OTHERCOMPONENTS",
    "properties": [
     {
      "name": "name",
      "value": "underscoreFormatted",
      "type": "Id"
     },
     {
      "name": "title",
      "value": "",
      "type": "String"
     },
     {
      "name": "parameter",
      "value": "",
      "type": "Parameter"
     },
     {
      "name": "listeners",
      "value": "[]",
      "type": "Listeners"
     },
     {
      "name": "parameters",
      "value": "[]",
      "type": "ValuesArray"
     },
     {
      "name": "dataSource",
      "value": "templateQuery",
      "type": "Datasource"
     },
     {
      "name": "priority",
      "value": 5,
      "type": "Integer"
     },
     {
      "name": "htmlObject",
      "value": "${p:underscoreFormatted}",
      "type": "HtmlObject"
     },
     {
      "name": "executeAtStart",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "preExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postFetch",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "preChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "tooltip",
      "value": "",
      "type": "Html"
     },
     {
      "name": "modelHandler",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "template",
      "value": "function() {\n    var template = ''+\n    '<% var table = Dashboards.getComponentByName(\"'+this.name+'\")%>'+ \n    '<% var getTrend = function(elem, key) {if (elem < 0) {return \"down icon-arrow-circle-o-down\"} else {return \"up icon-arrow-circle-o-up\"} } %>' + \n    '<div class=\"templateWrapper\">'+\n    '<% _.each(items, function(elem) { %> ' +\n    '       <div class=\"templateRow clickable\" data-click=\"<%=elem[0]%>\">'+\n    '           <div class=\"title\"> <%=elem[0]%> </div>'+\n    '           <div class=\"desc\"> <%=elem[1]%> </div>'+\n    '           <div class=\"value\">'+\n    '               <div class=\"trend <%=getTrend(elem[2])%>\"> </div>'+\n    '               <div class=\"number\"> <%=formatter(elem[2], \"floatFormatter\")%> </div>'+\n    '           </div>'+\n    '       </div>'+\n    '<% }); %>'\n    '</div>';\n    return template;\n}\n ",
      "type": "JavaScript"
     },
     {
      "name": "templateType",
      "value": "underscore",
      "type": "templateTypeCustom"
     },
     {
      "name": "events",
      "value": "[[\"click .templateRow\",\"function(e){\\n    var selected = $(this).attr('data-click');\\n    Dashboards.fireChange('${p:clickParam}', selected);\\n    Dashboards.log(selected, 'info');\\n}\"]]",
      "type": "EditorValuesArray"
     },
     {
      "name": "formatters",
      "value": "[[\"floatFormatter\",\"function(value){\\n    return numeral(value).format('0.0');\\n}\"]]",
      "type": "EditorValuesArray"
     },
     {
      "name": "rootElement",
      "value": "items",
      "type": "String"
     },
     {
      "name": "extendableOptions",
      "value": "function() {\n    var opts = {\n        extendedProperty: \"this is sample extend property\"\n    };\n    return opts;\n}\n    ",
      "type": "JavaScript"
     }
    ]
   },
   {
    "id": "ded52fd7-95b0-7ec9-998c-65090a1c1bd4",
    "type": "ComponentstemplateComponent",
    "typeDesc": "Template Component",
    "parent": "OTHERCOMPONENTS",
    "properties": [
     {
      "name": "name",
      "value": "addinsOnTemplateComp",
      "type": "Id"
     },
     {
      "name": "title",
      "value": "",
      "type": "String"
     },
     {
      "name": "parameter",
      "value": "",
      "type": "Parameter"
     },
     {
      "name": "listeners",
      "value": "[]",
      "type": "Listeners"
     },
     {
      "name": "parameters",
      "value": "[]",
      "type": "ValuesArray"
     },
     {
      "name": "dataSource",
      "value": "templateQuery",
      "type": "Datasource"
     },
     {
      "name": "priority",
      "value": 5,
      "type": "Integer"
     },
     {
      "name": "htmlObject",
      "value": "addinsOnTemplateComp",
      "type": "HtmlObject"
     },
     {
      "name": "executeAtStart",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "preExecution",
      "value": "function f() {\n    var templateOpts = {\n        templateType: 'mustache', \n        template:   '<div class=\"addinOnAddin\"> ' +\n                    '   <div> This is an addin inside the component, click me to see an alert message! </div>' +\n                    '   <div> You are looking to the {{items}} </div>' +\n                    '</div>',\n        rootElement: 'items',\n        formatters: { },\n        events: [\n            ['click .addinOnAddin', function(event) {\n                event.preventDefault();\n                event.stopPropagation();\n                var notyOpts = {theme: 'bootstrapTheme', type: 'success', text: 'You clicked on the addin for: Community '+event.data.status.model.items, layout: 'topRight', dismissQueue: true, timeout: 3000, modal: false, maxVisible: 10};\n                noty(notyOpts);\n            }]\n        ]\n    };\n\n    this.setAddInOptions(\"template\",\"template\", templateOpts);\n} ",
      "type": "JavaScript"
     },
     {
      "name": "postExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postFetch",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "preChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "tooltip",
      "value": "",
      "type": "Html"
     },
     {
      "name": "modelHandler",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "template",
      "value": "function() {\n\n    var template = ''+\n    //'<% var table = Dashboards.getComponentByName(\"'+this.name+'\")%>'+ \n    '<% var getTrend = function(elem, key) {if (elem < 0) {return \"down icon-arrow-circle-o-down\"} else {return \"up icon-arrow-circle-o-up\"} } %>' + \n    '<div class=\"templateWrapper\">'+\n    '<% _.each(items, function(elem) { %> ' +\n    '       <div class=\"templateRow clickable\" data-click=\"<%=elem[0]%>\">'+\n    '           <div class=\"title\"> <%=elem[0]%> </div>'+\n    '           <div class=\"desc\"> <%=elem[1]%> </div>'+\n    '           <div class=\"value\">'+\n    '               <div class=\"trend <%=getTrend(elem[2])%>\"> </div>'+\n    '               <div class=\"number\"> <%=formatter(elem[2], \"floatFormatter\")%> </div>'+\n    '               <div class=\"addin\"> <%=addin(elem[1], \"template\")%> </div>'+\n    '           </div>'+\n    '       </div>'+\n    '<% }); %>';\n    '</div>';\n    return template;\n}\n ",
      "type": "JavaScript"
     },
     {
      "name": "templateType",
      "value": "underscore",
      "type": "templateTypeCustom"
     },
     {
      "name": "events",
      "value": "[[\"click .templateRow\",\"function(event){\\n    event.preventDefault();\\n    event.stopPropagation();\\n    var selected = $(this).attr('data-click');\\n    var notyOpts = {\\n        theme: 'bootstrapTheme',\\n        type: 'success', \\n        text: 'You clicked on: '+selected, \\n        layout: 'topRight',\\n        dismissQueue: true,\\n        timeout: 3000, \\n        modal: false,\\n        maxVisible: 10\\n    };\\n    noty(notyOpts);\\n}\"]]",
      "type": "EditorValuesArray"
     },
     {
      "name": "formatters",
      "value": "[[\"floatFormatter\",\"function(value){\\n    return numeral(value).format('0.0');\\n}\"]]",
      "type": "EditorValuesArray"
     },
     {
      "name": "rootElement",
      "value": "items",
      "type": "String"
     },
     {
      "name": "extendableOptions",
      "value": "function() {\n    var opts = {\n        extendedProperty: \"this is sample extend property\"\n    };\n    return opts;\n}\n    ",
      "type": "JavaScript"
     }
    ]
   },
   {
    "id": "cc854b58-a814-c552-6379-0a47efe05513",
    "type": "ComponentstemplateComponent",
    "typeDesc": "Template Component",
    "parent": "OTHERCOMPONENTS",
    "properties": [
     {
      "name": "name",
      "value": "extendedProperties",
      "type": "Id"
     },
     {
      "name": "title",
      "value": "",
      "type": "String"
     },
     {
      "name": "parameter",
      "value": "",
      "type": "Parameter"
     },
     {
      "name": "listeners",
      "value": "[]",
      "type": "Listeners"
     },
     {
      "name": "parameters",
      "value": "[]",
      "type": "ValuesArray"
     },
     {
      "name": "dataSource",
      "value": "emptyTemplateQuery",
      "type": "Datasource"
     },
     {
      "name": "priority",
      "value": 5,
      "type": "Integer"
     },
     {
      "name": "htmlObject",
      "value": "${p:emptyTemplate}",
      "type": "HtmlObject"
     },
     {
      "name": "executeAtStart",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "preExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postFetch",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "preChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "tooltip",
      "value": "",
      "type": "Html"
     },
     {
      "name": "modelHandler",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "template",
      "value": "function() {\n    var template = ''+\n    '<div class=\"templateWrapper\">'+\n    '<% _.each(items, function(elem) { %> ' +\n    '       <div class=\"templateRow\">'+\n    '           <div class=\"templateCol0\"> <%=numeral(elem[0]).format(\"0.0\")%> </div>'+\n    '           <div class=\"templateCol1\"> <%=numeral(elem[1]).format(\"0.0\")%> </div>'+\n    '           <div class=\"templateCol2\"> <%=numeral(elem[2]).format(\"0.0\")%> </div>'+\n    '       </div>'+\n    '<% }); %>'\n    '</div>';\n    return template;\n}\n ",
      "type": "JavaScript"
     },
     {
      "name": "templateType",
      "value": "underscore",
      "type": "templateTypeCustom"
     },
     {
      "name": "events",
      "value": "[]",
      "type": "EditorValuesArray"
     },
     {
      "name": "formatters",
      "value": "[]",
      "type": "EditorValuesArray"
     },
     {
      "name": "rootElement",
      "value": "items",
      "type": "String"
     },
     {
      "name": "extendableOptions",
      "value": "function() {\n    var opts = {\n        messages: {\n            error: {\n                noData: \"No data available on this component. You can customize this messages ;)\",\n                invalidTemplate: \"Invalid template.\",\n                invalidTemplateType: \"Invalid template type.\",\n                generic: \"Invalid options defined. Please check the template component properties.\"\n            }\n            /*, \n            success: { }, \n            warning: { },\n            template:   \"<div class='alert alert-<%=type%>' role='alert'>\" +\n                        \"   <span class='glyphicon glyphicon-<%=icon%>' aria-hidden='true'></span> \" +\n                        \"   <span> <%=msg%> </span>\" +\n                        \"</div>\"\n                        */\n        }\n    };\n    return opts;\n}\n    ",
      "type": "JavaScript"
     }
    ]
   },
   {
    "id": "00fc7c10-af25-8207-f931-9cd35938d135",
    "type": "ComponentstemplateComponent",
    "typeDesc": "Template Component",
    "parent": "OTHERCOMPONENTS",
    "properties": [
     {
      "name": "name",
      "value": "manipulatingData",
      "type": "Id"
     },
     {
      "name": "title",
      "value": "",
      "type": "String"
     },
     {
      "name": "parameter",
      "value": "",
      "type": "Parameter"
     },
     {
      "name": "listeners",
      "value": "[]",
      "type": "Listeners"
     },
     {
      "name": "parameters",
      "value": "[]",
      "type": "ValuesArray"
     },
     {
      "name": "dataSource",
      "value": "templateQuery",
      "type": "Datasource"
     },
     {
      "name": "priority",
      "value": 5,
      "type": "Integer"
     },
     {
      "name": "htmlObject",
      "value": "${p:manipulateData}",
      "type": "HtmlObject"
     },
     {
      "name": "executeAtStart",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "preExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postFetch",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "preChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "tooltip",
      "value": "",
      "type": "Html"
     },
     {
      "name": "modelHandler",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "template",
      "value": "function() {\n    var template = ''+\n    '<% var getTrend = function(elem, key) {if (elem < 0) {return \"down icon-arrow-circle-o-down\"} else {return \"up icon-arrow-circle-o-up\"} } %>' + \n    '<div class=\"templateWrapper\">'+\n    '<% _.each(items, function(elem) { %> ' +\n    '       <div class=\"templateRow clickable\" data-click=\"<%=elem[0]%>\">'+\n    '           <div class=\"title\"> <%=elem[0]%> </div>'+\n    '           <div class=\"desc\"> <%=elem[1]%> </div>'+\n    '           <div class=\"value\">'+\n    '               <div class=\"trend <%=getTrend(elem[2])%>\"> </div>'+\n    '               <div class=\"number\"> <%=numeral(elem[2]).format(\"0.0\")%> </div>'+\n    '           </div>'+\n    '       </div>'+\n    '<% }); %>'\n    '</div>';\n    return template;\n}\n ",
      "type": "JavaScript"
     },
     {
      "name": "templateType",
      "value": "underscore",
      "type": "templateTypeCustom"
     },
     {
      "name": "events",
      "value": "[[\"click .templateRow\",\"function(e) {\\n    var selected = $(this).attr('data-click');\\n    Dashboards.fireChange('${p:clickParam}', selected);\\n    Dashboards.log(selected, 'info');\\n}\"]]",
      "type": "EditorValuesArray"
     },
     {
      "name": "formatters",
      "value": "[]",
      "type": "EditorValuesArray"
     },
     {
      "name": "rootElement",
      "value": "items",
      "type": "String"
     },
     {
      "name": "extendableOptions",
      "value": "function() {\n    var opts = {\n        extendedProperty: \"this is sample extend property\"\n    };\n    return opts;\n}\n    ",
      "type": "JavaScript"
     }
    ]
   },
   {
    "id": "65629d52-2120-2708-fe8d-f952d3435d61",
    "type": "ComponentstemplateComponent",
    "typeDesc": "Template Component",
    "parent": "OTHERCOMPONENTS",
    "properties": [
     {
      "name": "name",
      "value": "groupByData",
      "type": "Id"
     },
     {
      "name": "title",
      "value": "",
      "type": "String"
     },
     {
      "name": "parameter",
      "value": "",
      "type": "Parameter"
     },
     {
      "name": "listeners",
      "value": "[]",
      "type": "Listeners"
     },
     {
      "name": "parameters",
      "value": "[]",
      "type": "ValuesArray"
     },
     {
      "name": "dataSource",
      "value": "groupingRows",
      "type": "Datasource"
     },
     {
      "name": "priority",
      "value": 5,
      "type": "Integer"
     },
     {
      "name": "htmlObject",
      "value": "${p:groupByTemplateComp}",
      "type": "HtmlObject"
     },
     {
      "name": "executeAtStart",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "preExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postFetch",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "preChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "tooltip",
      "value": "",
      "type": "Html"
     },
     {
      "name": "modelHandler",
      "value": "function(data){\n    // groupingRows\n    if (data.queryInfo.totalRows > 0) {\n        var result = [];\n        _.each(data.resultset, function(row) {\n            result.push(_.extend({}, row));\n        });\n        var model = {};\n        model[this.rootElement] = result;\n        model[this.rootElement] = _.groupBy(model.items, function(elem){\n                return elem[0];\n            })\n        return model;\n    } else {\n        return \"\";\n    }\n} ",
      "type": "JavaScript"
     },
     {
      "name": "template",
      "value": "function() {\n    var template = ''+\n    '<div class=\"templateWrapperGroups\">'+\n    '<% _.each(items, function(value, key) { %> ' +\n    '       <div class=\"templateRow\">'+\n    '       <div class=\"groupTitle\"> <%=key%> </div>'+\n    '           <% _.each(value, function(elem) {%> ' +\n    '               <div class=\"title\"> <%=elem[1]%> </div>'+\n    '               <div class=\"value\"> <%=elem[2]%> </div>'+\n    '           <% }); %>'+\n    '       </div>'+\n    '<% }); %>'\n    '</div>';\n    return template;\n}\n ",
      "type": "JavaScript"
     },
     {
      "name": "templateType",
      "value": "underscore",
      "type": "templateTypeCustom"
     },
     {
      "name": "events",
      "value": "[]",
      "type": "EditorValuesArray"
     },
     {
      "name": "formatters",
      "value": "[]",
      "type": "EditorValuesArray"
     },
     {
      "name": "rootElement",
      "value": "items",
      "type": "String"
     },
     {
      "name": "extendableOptions",
      "value": "function() {\n    var opts = {\n        extendedProperty: \"this is sample extend property\"\n    };\n    return opts;\n}\n    ",
      "type": "JavaScript"
     }
    ]
   },
   {
    "id": "32b0162a-0ffe-593d-0a9c-4f95f2f15f72",
    "type": "ComponentstemplateComponent",
    "typeDesc": "Template Component",
    "parent": "OTHERCOMPONENTS",
    "properties": [
     {
      "name": "name",
      "value": "htmlTemplate",
      "type": "Id"
     },
     {
      "name": "title",
      "value": "",
      "type": "String"
     },
     {
      "name": "parameter",
      "value": "",
      "type": "Parameter"
     },
     {
      "name": "listeners",
      "value": "[]",
      "type": "Listeners"
     },
     {
      "name": "parameters",
      "value": "[]",
      "type": "ValuesArray"
     },
     {
      "name": "dataSource",
      "value": "templateQuery",
      "type": "Datasource"
     },
     {
      "name": "priority",
      "value": 5,
      "type": "Integer"
     },
     {
      "name": "htmlObject",
      "value": "${p:htmlTemplate}",
      "type": "HtmlObject"
     },
     {
      "name": "executeAtStart",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "preExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postFetch",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "preChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "tooltip",
      "value": "",
      "type": "Html"
     },
     {
      "name": "modelHandler",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "template",
      "value": "function() {\n    return $('#underscoreHtmlTemplate').html();\n}\n ",
      "type": "JavaScript"
     },
     {
      "name": "templateType",
      "value": "underscore",
      "type": "templateTypeCustom"
     },
     {
      "name": "events",
      "value": "[]",
      "type": "EditorValuesArray"
     },
     {
      "name": "formatters",
      "value": "[]",
      "type": "EditorValuesArray"
     },
     {
      "name": "rootElement",
      "value": "items",
      "type": "String"
     },
     {
      "name": "extendableOptions",
      "value": "function() {\n    var opts = {\n        extendedProperty: \"this is sample extend property\"\n    };\n    return opts;\n}\n    ",
      "type": "JavaScript"
     }
    ]
   },
   {
    "id": "53ef8c54-5b2f-2ecd-432c-f1c8a66ac010",
    "type": "ComponentsTable",
    "typeDesc": "table Component",
    "parent": "OTHERCOMPONENTS",
    "properties": [
     {
      "name": "name",
      "value": "addinTemplateTable",
      "type": "Id"
     },
     {
      "name": "expandContainerObject",
      "value": "",
      "type": "String"
     },
     {
      "name": "listeners",
      "value": "[]",
      "type": "Listeners"
     },
     {
      "name": "oLanguage",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "language",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "colSortable",
      "value": "[]",
      "type": "Array"
     },
     {
      "name": "colFormats",
      "value": "[]",
      "type": "Array"
     },
     {
      "name": "colWidths",
      "value": "[\"20%\",\"10%\",\"56%\",\"8%\",\"8%\"]",
      "type": "Array"
     },
     {
      "name": "colHeaders",
      "value": "[]",
      "type": "Array"
     },
     {
      "name": "parameters",
      "value": "[]",
      "type": "ValuesArray"
     },
     {
      "name": "expandParameters",
      "value": "[]",
      "type": "ValuesArray"
     },
     {
      "name": "colTypes",
      "value": "[\"template\",\"template\",\"template\",\"numeric\",\"numeric\"]",
      "type": "colTypesCustom"
     },
     {
      "name": "paginate",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "lengthChange",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "filter",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "info",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "sort",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "expandOnClick",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "displayLength",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "colSearchable",
      "value": "[]",
      "type": "Array"
     },
     {
      "name": "drawCallback",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "dataSource",
      "value": "githubStats",
      "type": "Datasource"
     },
     {
      "name": "sortBy",
      "value": "[]",
      "type": "SortByArray"
     },
     {
      "name": "sDom",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "refreshPeriod",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "priority",
      "value": 5,
      "type": "Integer"
     },
     {
      "name": "tableStyle",
      "value": "bootstrap",
      "type": "TableStyle"
     },
     {
      "name": "paginationType",
      "value": "simple",
      "type": "PaginationType"
     },
     {
      "name": "htmlObject",
      "value": "${p:addinTemplateTable}",
      "type": "HtmlObject"
     },
     {
      "name": "executeAtStart",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "paginateServerside",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "preExecution",
      "value": "function f() {\n    var templateOptsInfo = {\n        templateType: 'mustache', \n        template:   '<div>'+\n                    '  <div> {{items.name}} </div>'+\n                    '  <div> <a href=\"mailto:{{items.email}}\"> {{items.email}} </a> </div>'+\n                    '  <div class=\"fa fa-clock-o\"> {{items.date.date}} </div>'+\n                    '  <div class=\"fa fa-calendar\"> {{items.date.time}} </div>'+\n                    '</div>',\n        rootElement: 'items',\n        formatters: {\n            date: function(value){\n                var result = {\n                    date: moment(value).format('YYYY-MM-DD'),\n                    time: moment(value).format('hh:mm:ss')\n                };\n                return result;\n            }\n        }\n    };\n    var templateOptsLink = {\n        templateType: 'mustache', \n        template:   '<div class=\"fa fa-external-link\"> <a target=\"_blank\" href=\"{{value}}\"> Details </a> </div>',\n        rootElement: 'value',\n        formatters: {\n        }\n    };\n    var templateOptsExpandClick = {\n        templateType: 'mustache', \n        template:   '<div>'+\n                    '   <div class=\"message ellipsis\"> {{value}} </div>'+\n                    '   <a class=\"toggleEllipsis\"> Click me to expand/collapse </a>'+\n                    '</div>',\n        rootElement: 'value',\n        formatters: {\n        },\n        events: [\n            ['click .toggleEllipsis', function(event) {\n                $(event.data.target).find('.message').toggleClass('ellipsis');\n            }]\n        ]\n    };\n    \n    this.setAddInOptions(\"colType\",\"template\", function(state){\n        var opts = {};\n        switch(state.colIdx) {\n            case 0: \n                opts =  templateOptsInfo;\n                break;\n            case 1: \n                opts =  templateOptsLink;\n                break;\n            case 2: \n                opts =  templateOptsExpandClick;\n                break;\n            default: \n                opts = {};\n                break;\n        }\n        return opts;\n    });\n} ",
      "type": "JavaScript"
     },
     {
      "name": "postFetch",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "preChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "tooltip",
      "value": "",
      "type": "Html"
     },
     {
      "name": "extraOptions",
      "value": "[]",
      "type": "OptionArray"
     },
     {
      "name": "clickAction",
      "value": "",
      "type": "JavaScript"
     }
    ]
   }
  ]
 },
 "datasources": {
  "rows": [
   {
    "id": "SCRIPTING",
    "name": "SCRIPTING Queries",
    "type": "Label",
    "typeDesc": "<i>Group</i>",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "value": "SCRIPTING Queries",
      "type": "Label"
     }
    ]
   },
   {
    "id": "586de3f7-9675-e2fd-e01a-a59e9b8b054a",
    "type": "Componentsscriptable_scripting",
    "typeDesc": "scriptable over scripting",
    "parent": "SCRIPTING",
    "properties": [
     {
      "name": "name",
      "value": "groupingRows",
      "type": "Id"
     },
     {
      "name": "language",
      "value": "beanshell",
      "type": "String"
     },
     {
      "name": "initscript",
      "value": "",
      "type": "String"
     },
     {
      "name": "access",
      "value": "public",
      "type": "Access"
     },
     {
      "name": "query",
      "value": "import org.pentaho.reporting.engine.classic.core.util.TypedTableModel;    \nString[] columnNames = new String[]{\t\t\t\t\t\t\t\t\t\t\t\n\t\"Name\",\t\"Description\",\t\"Value\"\n};\t\t\t\t\t\t\t\t\t\t\t\nClass[] columnTypes = new Class[]{\t\t\t\t\t\t\t\t\t\t\t\n\tString.class,\tString.class,\tFloat.class\n};\t\t\t\t\t\t\t\t\t\t\t\nTypedTableModel model = new TypedTableModel(columnNames, columnTypes);\t\t\t\t\t\t\t\t\t\t\t\n\nmodel.addRow(new Object[]{ new String(\"Pentaho\"), new String (\"PDI\"), new Float(120)});\nmodel.addRow(new Object[]{ new String(\"Pentaho\"), new String (\"Shims\"), new Float(10)});\nmodel.addRow(new Object[]{ new String(\"Webdetails\"), new String (\"CDE\"), new Float(60)});\nmodel.addRow(new Object[]{ new String(\"Webdetails\"), new String (\"CDF\"), new Float(50)});\nmodel.addRow(new Object[]{ new String(\"Webdetails\"), new String (\"CDA\"), new Float(10)});\n\n\nreturn model;",
      "type": "ScriptableQuery"
     },
     {
      "name": "parameters",
      "value": "[]",
      "type": "CdaParameters"
     },
     {
      "name": "outputMode",
      "value": "include",
      "type": "OutputMode"
     },
     {
      "name": "cdacolumns",
      "value": "[]",
      "type": "CdaColumnsArray"
     },
     {
      "name": "cdacalculatedcolumns",
      "value": "[]",
      "type": "CdaCalculatedColumnsArray"
     },
     {
      "name": "output",
      "value": "[]",
      "type": "IndexArray"
     },
     {
      "name": "cacheDuration",
      "value": 3600,
      "type": "Integer"
     },
     {
      "name": "cache",
      "value": "true",
      "type": "Boolean"
     }
    ],
    "meta": "CDA",
    "meta_conntype": "scripting.scripting",
    "meta_datype": "scriptable"
   },
   {
    "id": "3f51747f-d9fd-f8c2-2b54-da88225be139",
    "type": "Componentsscriptable_scripting",
    "typeDesc": "scriptable over scripting",
    "parent": "SCRIPTING",
    "properties": [
     {
      "name": "name",
      "value": "emptyTemplateQuery",
      "type": "Id"
     },
     {
      "name": "initscript",
      "value": "",
      "type": "String"
     },
     {
      "name": "language",
      "value": "beanshell",
      "type": "String"
     },
     {
      "name": "access",
      "value": "public",
      "type": "Access"
     },
     {
      "name": "query",
      "value": "import org.pentaho.reporting.engine.classic.core.util.TypedTableModel;    \nString[] columnNames = new String[]{\t\t\t\t\t\t\t\t\t\t\t\n\t\"Name\",\t\"Description\",\t\"Latitude\",\t\"Longitude\", \"enabled\",\t\"date\",\t\"bullet\",\t\"v1\",\t\"v2\",\t\"v3\"\t\n};\t\t\t\t\t\t\t\t\t\t\t\nClass[] columnTypes = new Class[]{\t\t\t\t\t\t\t\t\t\t\t\n\tString.class,\tString.class,\tFloat.class,\tFloat.class,\tBoolean.class,\tString.class,\tString.class,\tFloat.class,\tFloat.class,\tFloat.class\t\n};\t\t\t\t\t\t\t\t\t\t\t\nTypedTableModel model = new TypedTableModel(columnNames, columnTypes);\t\t\t\t\t\t\t\t\t\t\t\n\nreturn model;",
      "type": "ScriptableQuery"
     },
     {
      "name": "parameters",
      "value": "[]",
      "type": "CdaParameters"
     },
     {
      "name": "outputMode",
      "value": "include",
      "type": "OutputMode"
     },
     {
      "name": "cdacolumns",
      "value": "[]",
      "type": "CdaColumnsArray"
     },
     {
      "name": "cdacalculatedcolumns",
      "value": "[]",
      "type": "CdaCalculatedColumnsArray"
     },
     {
      "name": "output",
      "value": "[]",
      "type": "IndexArray"
     },
     {
      "name": "cacheDuration",
      "value": 3600,
      "type": "Integer"
     },
     {
      "name": "cache",
      "value": "true",
      "type": "Boolean"
     }
    ],
    "meta": "CDA",
    "meta_conntype": "scripting.scripting",
    "meta_datype": "scriptable"
   },
   {
    "id": "01ca0e79-4e7c-a543-6a61-6925692ac8f9",
    "type": "Componentsscriptable_scripting",
    "typeDesc": "scriptable over scripting",
    "parent": "SCRIPTING",
    "properties": [
     {
      "name": "name",
      "value": "templateQuery",
      "type": "Id"
     },
     {
      "name": "language",
      "value": "beanshell",
      "type": "String"
     },
     {
      "name": "initscript",
      "value": "",
      "type": "String"
     },
     {
      "name": "access",
      "value": "public",
      "type": "Access"
     },
     {
      "name": "query",
      "value": "import org.pentaho.reporting.engine.classic.core.util.TypedTableModel;    \nString[] columnNames = new String[]{\t\t\t\t\t\t\t\t\t\t\t\n\t\"Name\",\t\"Description\",\t\"Latitude\",\t\"Longitude\",\t\"enabled\",\t\"date\",\t\"bullet\",\t\"v1\",\t\"v2\",\t\"v3\"\t\n};\t\t\t\t\t\t\t\t\t\t\t\nClass[] columnTypes = new Class[]{\t\t\t\t\t\t\t\t\t\t\t\n\tString.class,\tString.class,\tFloat.class,\tFloat.class,\tBoolean.class,\tString.class,\tString.class,\tFloat.class,\tFloat.class,\tFloat.class\t\n};\t\t\t\t\t\t\t\t\t\t\t\nTypedTableModel model = new TypedTableModel(columnNames, columnTypes);\t\t\t\t\t\t\t\t\t\t\t\nmodel.addRow(new Object[]{\tnew String (\"CDA\"),\tnew String (\"Data Access\"),\tnew Float(43.12404151),\tnew Float(17.07182076),\tnew Boolean(true),\tnew String(\"2014-12-24\"),\tnew String (\"54.35075125,22.41322006,75.05981995\"),\tnew Float(54.35075125),\tnew Float(22.41322006),\tnew Float(75.05981995)\t});\nmodel.addRow(new Object[]{\tnew String (\"CDE\"),\tnew String (\"Dashboard Editor\"),\tnew Float(-17.41839566),\tnew Float(119.7625068),\tnew Boolean(true),\tnew String(\"2014-12-25\"),\tnew String (\"46.52281945,54.51525158,52.79385679\"),\tnew Float(46.52281945),\tnew Float(54.51525158),\tnew Float(52.79385679)\t});\nmodel.addRow(new Object[]{\tnew String (\"CDF\"),\tnew String (\"Dashboard Framework\"),\tnew Float(-17.84303697),\tnew Float(-96.72580186),\tnew Boolean(true),\tnew String(\"2014-12-26\"),\tnew String (\"45.03409699,0.02939752151,86.2054509\"),\tnew Float(45.03409699),\tnew Float(0.02939752151),\tnew Float(86.2054509)\t});\nmodel.addRow(new Object[]{\tnew String (\"CCC\"),\tnew String (\"Charts Components\"),\tnew Float(-28.65016157),\tnew Float(-24.05256525),\tnew Boolean(true),\tnew String(\"2014-12-27\"),\tnew String (\"35.89925775,51.4782757,84.2320869\"),\tnew Float(35.89925775),\tnew Float(51.4782757),\tnew Float(84.2320869)\t});\nmodel.addRow(new Object[]{\tnew String (\"CGG\"),\tnew String (\"Graphics Generator\"),\tnew Float(-80.45989423),\tnew Float(135.234683),\tnew Boolean(true),\tnew String(\"2014-12-28\"),\tnew String (\"98.93216741,11.45434722,81.46034629\"),\tnew Float(98.93216741),\tnew Float(11.45434722),\tnew Float(81.46034629)\t});\nmodel.addRow(new Object[]{\tnew String (\"CPK\"),\tnew String (\"Plugin Kickstarter\"),\tnew Float(-22.06705617),\tnew Float(29.63033197),\tnew Boolean(false),\tnew String(\"2014-12-29\"),\tnew String (\"80.76432443,35.17587706,73.72982155\"),\tnew Float(80.76432443),\tnew Float(35.17587706),\tnew Float(73.72982155)\t});\nmodel.addRow(new Object[]{\tnew String (\"CFR\"),\tnew String (\"File Repository\"),\tnew Float(-64.86836197),\tnew Float(-62.77248056),\tnew Boolean(false),\tnew String(\"2014-12-30\"),\tnew String (\"13.51558242,14.6513744,97.66532517\"),\tnew Float(13.51558242),\tnew Float(14.6513744),\tnew Float(97.66532517)\t});\nmodel.addRow(new Object[]{\tnew String (\"CDG\"),\tnew String (\"Data Generator\"),\tnew Float(-88.20733418),\tnew Float(-72.48848486),\tnew Boolean(false),\tnew String(\"2015-01-01\"),\tnew String (\"1.954412768,83.66806352,31.52089382\"),\tnew Float(1.954412768),\tnew Float(83.66806352),\tnew Float(31.52089382)\t});\nmodel.addRow(new Object[]{\tnew String (\"CBF\"),\tnew String (\"Build Framework\"),\tnew Float(10.75148192),\tnew Float(-175.6339215),\tnew Boolean(true),\tnew String(\"2015-01-02\"),\tnew String (\"23.42902329,36.18434318,63.00424021\"),\tnew Float(23.42902329),\tnew Float(36.18434318),\tnew Float(63.00424021)\t});\nreturn model;",
      "type": "ScriptableQuery"
     },
     {
      "name": "parameters",
      "value": "[]",
      "type": "CdaParameters"
     },
     {
      "name": "outputMode",
      "value": "include",
      "type": "OutputMode"
     },
     {
      "name": "cdacolumns",
      "value": "[]",
      "type": "CdaColumnsArray"
     },
     {
      "name": "cdacalculatedcolumns",
      "value": "[]",
      "type": "CdaCalculatedColumnsArray"
     },
     {
      "name": "output",
      "value": "[]",
      "type": "IndexArray"
     },
     {
      "name": "cacheDuration",
      "value": 3600,
      "type": "Integer"
     },
     {
      "name": "cache",
      "value": "true",
      "type": "Boolean"
     }
    ],
    "meta": "CDA",
    "meta_conntype": "scripting.scripting",
    "meta_datype": "scriptable"
   },
   {
    "id": "KETTLE",
    "name": "KETTLE Queries",
    "type": "Label",
    "typeDesc": "<i>Group</i>",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "value": "KETTLE Queries",
      "type": "Label"
     }
    ]
   },
   {
    "id": "c47188ae-84cf-d08c-08b1-5b6e5fa82357",
    "type": "Componentskettle_kettleTransFromFile",
    "typeDesc": "kettle over kettleTransFromFile",
    "parent": "KETTLE",
    "properties": [
     {
      "name": "name",
      "value": "githubStats",
      "type": "Id"
     },
     {
      "name": "ktrFile",
      "value": "resources/queries/githubStats.ktr",
      "type": "KtrPath"
     },
     {
      "name": "access",
      "value": "public",
      "type": "Access"
     },
     {
      "name": "query",
      "value": "OUTPUT",
      "type": "DefaultQuery"
     },
     {
      "name": "variables",
      "value": "[[\"OWNER\",\"OWNER\"],[\"REPO\",\"REPO\"],[\"SHA\",\"SHA\"]]",
      "type": "ValuesArray"
     },
     {
      "name": "parameters",
      "value": "[[\"ONWER\",\"webdetails\",\"String\",\"\"],[\"REPO\",\"cde\",\"String\",\"\"],[\"SHA\",\"master\",\"String\",\"\"]]",
      "type": "CdaParameters"
     },
     {
      "name": "outputMode",
      "value": "exclude",
      "type": "OutputMode"
     },
     {
      "name": "cdacolumns",
      "value": "[]",
      "type": "CdaColumnsArray"
     },
     {
      "name": "cdacalculatedcolumns",
      "value": "[]",
      "type": "CdaCalculatedColumnsArray"
     },
     {
      "name": "output",
      "value": "[\"0\",\"1\",\"2\"]",
      "type": "IndexArray"
     },
     {
      "name": "cacheDuration",
      "value": 3600,
      "type": "Integer"
     },
     {
      "name": "cache",
      "value": "true",
      "type": "Boolean"
     }
    ],
    "meta": "CDA",
    "meta_conntype": "kettle.TransFromFile",
    "meta_datype": "kettle"
   }
  ]
 },
 "filename": "/public/Template Component Sample/templateComponentSamples.cdfde"
}